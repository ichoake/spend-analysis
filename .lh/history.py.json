{
    "sourceFile": "history.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1749262356183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749262669107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,29 @@\n #!/usr/bin/env python3\n \"\"\"\n-Analyze a transaction CSV and generate spending reports.\n+Analyze a transaction CSV and generate comprehensive spending reports.\n \n Features:\n-- Detects date, amount, and category columns automatically.\n-- Outputs:\n+- Automatically detects date, amount, and category columns.\n+- Outputs include:\n     - Monthly spending by category\n-    - Year-to-date (last 12 months) spending by category\n+    - Year-to-date spending by category\n     - Cumulative spending\n     - 3-month rolling average by category\n     - Top 10 spending descriptions\n     - Monthly total spending trend\n     - Category growth/decline (month-over-month % change)\n     - Largest single transactions\n-    - Spending by merchant/vendor (if column exists)\n-    - Spending by payment method (if column exists)\n+    - Spending by merchant/vendor\n+    - Spending by payment method\n     - Spending heatmap by day of week\n     - Days with no spending\n-    - Recurring payments detection (simple heuristic)\n-    - Budget comparison (if budget.csv exists)\n+    - Recurring payments detection\n+    - Budget comparison\n     - Spending distribution (histogram)\n-    - Median and average transaction size (overall and by category)\n+    - Median and average transaction size\n     - Spending by weekday/weekend\n-    - Cash flow analysis (if income/expense distinction exists)\n+    - Cash flow analysis\n - Optionally displays a plot of monthly spending by category.\n \"\"\"\n \n import argparse\n@@ -35,36 +35,24 @@\n import numpy as np\n \n def parse_args():\n     parser = argparse.ArgumentParser(description=\"Analyze a transaction CSV and generate spending reports.\")\n-    parser.add_argument(\n-        \"--input_csv\",\n-        default=\"docs/AccountHistory.csv\",\n-        help=\"Path to transactions CSV (default: docs/AccountHistory.csv)\"\n-    )\n-    parser.add_argument(\n-        \"--output_dir\",\n-        default=\".\",\n-        help=\"Directory to save output CSVs (default: current directory)\"\n-    )\n-    parser.add_argument(\n-        \"--no-plot\",\n-        action=\"store_true\",\n-        help=\"Do not display the monthly spending plot\"\n-    )\n-    parser.add_argument(\n-        \"--budget_csv\",\n-        default=None,\n-        help=\"Optional: Path to budget CSV (columns: category, budget)\"\n-    )\n+    parser.add_argument(\"--input_csv\", default=\"docs/AccountHistory.csv\", help=\"Path to transactions CSV\")\n+    parser.add_argument(\"--output_dir\", default=\".\", help=\"Directory to save output CSVs\")\n+    parser.add_argument(\"--no-plot\", action=\"store_true\", help=\"Do not display the monthly spending plot\")\n+    parser.add_argument(\"--budget_csv\", default=None, help=\"Optional: Path to budget CSV\")\n     return parser.parse_args()\n \n def setup_logging():\n-    logging.basicConfig(\n-        level=logging.INFO,\n-        format=\"%(levelname)s: %(message)s\"\n-    )\n+    logging.basicConfig(level=logging.INFO, format=\"%(levelname)s: %(message)s\")\n \n+def detect_column(df, keywords, default=None):\n+    for col in df.columns:\n+        if any(keyword in col.lower() for keyword in keywords):\n+            logging.info(f\"Detected column: '{col}'\")\n+            return col\n+    return default\n+\n def detect_date_column(df):\n     for col in df.columns:\n         try:\n             parsed = pd.to_datetime(df[col], errors='coerce')\n"
                },
                {
                    "date": 1749262676675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,58 +60,27 @@\n                 logging.info(f\"Detected date column: '{col}'\")\n                 return parsed\n         except Exception:\n             continue\n-    raise ValueError(\"No suitable date column found. Please ensure your CSV has a date column.\")\n+    raise ValueError(\"No suitable date column found.\")\n \n def detect_amount_column(df):\n     num_cols = df.select_dtypes(include=['number']).columns\n     if not num_cols.empty:\n         logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n         return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n-    for col in df.columns:\n-        if 'amount' in col.lower():\n-            logging.info(f\"Detected amount column by name: '{col}'\")\n-            return pd.to_numeric(df[col], errors='coerce').fillna(0)\n+    amount_col = detect_column(df, ['amount'])\n+    if amount_col:\n+        return pd.to_numeric(df[amount_col], errors='coerce').fillna(0)\n     raise ValueError(\"No numeric column found for amounts.\")\n \n def detect_category_column(df):\n-    if 'category' in df.columns:\n-        logging.info(\"Detected category column: 'category'\")\n-        return df['category']\n-    for col in df.columns:\n-        if 'cat' in col.lower():\n-            logging.info(f\"Detected category column: '{col}'\")\n-            return df[col]\n+    category_col = detect_column(df, ['category', 'cat'])\n+    if category_col:\n+        return df[category_col]\n     logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n     return 'Uncategorized'\n \n-def detect_description_column(df):\n-    if 'description' in df.columns:\n-        return 'description'\n-    for col in df.columns:\n-        if 'desc' in col.lower() or 'memo' in col.lower() or 'name' in col.lower():\n-            return col\n-    return df.columns[1] if len(df.columns) > 1 else df.columns[0]\n-\n-def detect_merchant_column(df):\n-    for col in df.columns:\n-        if 'merchant' in col.lower() or 'vendor' in col.lower() or 'payee' in col.lower():\n-            return col\n-    return None\n-\n-def detect_payment_method_column(df):\n-    for col in df.columns:\n-        if 'method' in col.lower() or 'payment' in col.lower():\n-            return col\n-    return None\n-\n-def detect_income_expense_column(df):\n-    for col in df.columns:\n-        if 'type' in col.lower() or 'income' in col.lower() or 'expense' in col.lower():\n-            return col\n-    return None\n-\n def main():\n     setup_logging()\n     args = parse_args()\n     output_dir = Path(args.output_dir)\n@@ -132,8 +101,16 @@\n         sys.exit(1)\n \n     df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n \n+    # Generate reports\n+    report_generators = [\n+        ('monthly_spending_by_category.csv', lambda: df.groupby(['year_month', 'category'])['amount'].sum().reset_index().pivot(index='year_month', columns='category', values='amount').fillna(0)),\n+        ('year_to_date_spending_by_category.csv', lambda: df[df['date'] >= (df['date'].max() - pd.DateOffset(months=12))].groupby('category')['amount'].sum().reset_index()),\n+        ('cumulative_spending.csv', lambda: df.groupby('date')['amount'].sum().cumsum().reset_index()),\n+        ('3mo_rolling_avg_by_category.csv', lambda: df.groupby(['year_month', 'category'])['amount'].sum().reset_index().pivot(index='year_month', columns='category', values='amount').fillna(0).rolling(window=3).mean().dropna()),\n+        ('top_10_spenders.csv', lambda: df.groupby(detect_column(df, ['description', 'desc', 'memo', 'name'], df.columns[1]))['amount'].sum().nlargest(10).reset_index().rename(columns={0: 'description', 1: 'amount'})),\n+        ('monthly_total_spending.csv', lambda: df.groupby('year_month')['amount'].sum().reset_index()),\n     # 1. Monthly spending by category\n     monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n     pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n     pivot_path = output_dir / 'monthly_spending_by_category.csv'\n"
                },
                {
                    "date": 1749262687144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,165 +109,32 @@\n         ('cumulative_spending.csv', lambda: df.groupby('date')['amount'].sum().cumsum().reset_index()),\n         ('3mo_rolling_avg_by_category.csv', lambda: df.groupby(['year_month', 'category'])['amount'].sum().reset_index().pivot(index='year_month', columns='category', values='amount').fillna(0).rolling(window=3).mean().dropna()),\n         ('top_10_spenders.csv', lambda: df.groupby(detect_column(df, ['description', 'desc', 'memo', 'name'], df.columns[1]))['amount'].sum().nlargest(10).reset_index().rename(columns={0: 'description', 1: 'amount'})),\n         ('monthly_total_spending.csv', lambda: df.groupby('year_month')['amount'].sum().reset_index()),\n-    # 1. Monthly spending by category\n-    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n-    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n-    pivot_path = output_dir / 'monthly_spending_by_category.csv'\n-    pivot.to_csv(pivot_path)\n+        ('category_monthly_pct_change.csv', lambda: df.groupby(['year_month', 'category'])['amount'].sum().reset_index().pivot(index='year_month', columns='category', values='amount').fillna(0).pct_change().replace([np.inf, -np.inf], np.nan) * 100),\n+        ('largest_single_transactions.csv', lambda: df.nlargest(10, 'amount')),\n+        ('spending_by_merchant.csv', lambda: df.groupby(detect_column(df, ['merchant', 'vendor', 'payee'])).amount.sum().sort_values(ascending=False).reset_index() if detect_column(df, ['merchant', 'vendor', 'payee']) else None),\n+        ('spending_by_payment_method.csv', lambda: df.groupby(detect_column(df, ['method', 'payment'])).amount.sum().sort_values(ascending=False).reset_index() if detect_column(df, ['method', 'payment']) else None),\n+        ('spending_by_weekday.csv', lambda: df.assign(weekday=df['date'].dt.day_name()).groupby('weekday')['amount'].sum().reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']).reset_index()),\n+        ('days_with_no_spending.csv', lambda: pd.Series(pd.date_range(df['date'].min(), df['date'].max(), freq='D').difference(pd.to_datetime(df['date'].unique()))).to_frame('date')),\n+        ('recurring_payments.csv', lambda: df.groupby([detect_column(df, ['description', 'desc', 'memo', 'name'], df.columns[1]), 'amount']).size().reset_index(name='count').query('count >= 3')),\n+        ('budget_comparison.csv', lambda: pd.read_csv(args.budget_csv).merge(df[df['date'] >= (df['date'].max() - pd.DateOffset(months=12))].groupby('category')['amount'].sum().reset_index(), on='category', how='left').assign(over_under=lambda x: x['amount'] - x['budget']) if args.budget_csv and Path(args.budget_csv).exists() else None),\n+        ('spending_distribution_histogram.png', lambda: df['amount'].plot.hist(bins=50, title='Spending Distribution (Histogram)').get_figure().savefig(output_dir / 'spending_distribution_histogram.png') or plt.close()),\n+        ('transaction_stats_by_category.csv', lambda: df.groupby('category')['amount'].agg(['mean', 'median', 'count']).reset_index()),\n+        ('transaction_stats_overall.csv', lambda: df['amount'].agg(['mean', 'median', 'count']).to_frame().T),\n+        ('spending_by_weekday_weekend.csv', lambda: df.assign(is_weekend=df['date'].dt.weekday >= 5).groupby('is_weekend')['amount'].sum().reset_index().assign(day_type=lambda x: x['is_weekend'].map({True: 'Weekend', False: 'Weekday'})).loc[:, ['day_type', 'amount']]),\n+        ('cash_flow_analysis.csv', lambda: df.groupby(['year_month', detect_column(df, ['type', 'income', 'expense'])])['amount'].sum().unstack(fill_value=0).assign(net=lambda x: x.sum(axis=1)) if detect_column(df, ['type', 'income', 'expense']) else None)\n+    ]\n \n-    # 2. Year-to-date (last 12 months) summary\n-    latest = df['date'].max()\n-    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n-    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n-    ytd_path = output_dir / 'year_to_date_spending_by_category.csv'\n-    ytd_summary.to_csv(ytd_path, index=False)\n+    for file_name, generator in report_generators:\n+        result = generator()\n+        if result is not None:\n+            result.to_csv(output_dir / file_name, index=False)\n+            logging.info(f\"Generated report: {file_name}\")\n \n-    # 3. Cumulative spend\n-    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n-    cum_path = output_dir / 'cumulative_spending.csv'\n-    cum.to_csv(cum_path, index=False)\n-\n-    # 4. 3-month rolling average\n-    rolling = pivot.rolling(window=3).mean().dropna()\n-    rolling_path = output_dir / '3mo_rolling_avg_by_category.csv'\n-    rolling.to_csv(rolling_path)\n-\n-    # 5. Top 10 spending descriptions\n-    desc_col = detect_description_column(df)\n-    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n-    top.columns = ['description', 'amount']\n-    top_path = output_dir / 'top_10_spenders.csv'\n-    top.to_csv(top_path, index=False)\n-\n-    # 6. Monthly total spending trend\n-    monthly_total = df.groupby('year_month')['amount'].sum().reset_index()\n-    monthly_total_path = output_dir / 'monthly_total_spending.csv'\n-    monthly_total.to_csv(monthly_total_path, index=False)\n-\n-    # 7. Category growth/decline (month-over-month % change)\n-    cat_pct_change = pivot.pct_change().replace([np.inf, -np.inf], np.nan) * 100\n-    cat_pct_change_path = output_dir / 'category_monthly_pct_change.csv'\n-    cat_pct_change.to_csv(cat_pct_change_path)\n-\n-    # 8. Largest single transactions\n-    largest_tx = df.sort_values('amount', ascending=False).head(10)\n-    largest_tx_path = output_dir / 'largest_single_transactions.csv'\n-    largest_tx.to_csv(largest_tx_path, index=False)\n-\n-    # 9. Spending by merchant/vendor\n-    merchant_col = detect_merchant_column(df)\n-    if merchant_col:\n-        merchant_spend = df.groupby(merchant_col)['amount'].sum().sort_values(ascending=False).reset_index()\n-        merchant_spend_path = output_dir / 'spending_by_merchant.csv'\n-        merchant_spend.to_csv(merchant_spend_path, index=False)\n-    else:\n-        merchant_spend_path = None\n-\n-    # 10. Spending by payment method\n-    payment_col = detect_payment_method_column(df)\n-    if payment_col:\n-        payment_spend = df.groupby(payment_col)['amount'].sum().sort_values(ascending=False).reset_index()\n-        payment_spend_path = output_dir / 'spending_by_payment_method.csv'\n-        payment_spend.to_csv(payment_spend_path, index=False)\n-    else:\n-        payment_spend_path = None\n-\n-    # 11. Spending heatmap by day of week\n-    df['weekday'] = df['date'].dt.day_name()\n-    weekday_spend = df.groupby('weekday')['amount'].sum().reindex(\n-        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n-    ).reset_index()\n-    weekday_spend_path = output_dir / 'spending_by_weekday.csv'\n-    weekday_spend.to_csv(weekday_spend_path, index=False)\n-\n-    # 12. Days with no spending\n-    all_days = pd.date_range(df['date'].min(), df['date'].max(), freq='D')\n-    spent_days = pd.to_datetime(df['date'].unique())\n-    no_spend_days = pd.Series(all_days.difference(spent_days))\n-    no_spend_days_path = output_dir / 'days_with_no_spending.csv'\n-    no_spend_days.to_frame('date').to_csv(no_spend_days_path, index=False)\n-\n-    # 13. Recurring payments detection (simple: same amount, same description, monthly)\n-    recurring = df.groupby([desc_col, 'amount']).size().reset_index(name='count')\n-    recurring = recurring[recurring['count'] >= 3]  # at least 3 occurrences\n-    recurring_path = output_dir / 'recurring_payments.csv'\n-    recurring.to_csv(recurring_path, index=False)\n-\n-    # 14. Budget comparison (if budget CSV provided)\n-    if args.budget_csv and Path(args.budget_csv).exists():\n-        budget = pd.read_csv(args.budget_csv)\n-        budget_compare = ytd_summary.merge(budget, on='category', how='left')\n-        budget_compare['over_under'] = budget_compare['amount'] - budget_compare['budget']\n-        budget_compare_path = output_dir / 'budget_comparison.csv'\n-        budget_compare.to_csv(budget_compare_path, index=False)\n-    else:\n-        budget_compare_path = None\n-\n-    # 15. Spending distribution (histogram)\n-    plt.figure()\n-    df['amount'].plot.hist(bins=50, title='Spending Distribution (Histogram)')\n-    plt.xlabel('Transaction Amount')\n-    plt.tight_layout()\n-    hist_path = output_dir / 'spending_distribution_histogram.png'\n-    plt.savefig(hist_path)\n-    plt.close()\n-\n-    # 16. Median and average transaction size (overall and by category)\n-    stats = df.groupby('category')['amount'].agg(['mean', 'median', 'count']).reset_index()\n-    stats_path = output_dir / 'transaction_stats_by_category.csv'\n-    stats.to_csv(stats_path, index=False)\n-    overall_stats = df['amount'].agg(['mean', 'median', 'count'])\n-    overall_stats_path = output_dir / 'transaction_stats_overall.csv'\n-    overall_stats.to_frame().T.to_csv(overall_stats_path, index=False)\n-\n-    # 17. Spending by weekday/weekend\n-    df['is_weekend'] = df['date'].dt.weekday >= 5\n-    weekend_spend = df.groupby('is_weekend')['amount'].sum().reset_index()\n-    weekend_spend['day_type'] = weekend_spend['is_weekend'].map({True: 'Weekend', False: 'Weekday'})\n-    weekend_spend_path = output_dir / 'spending_by_weekday_weekend.csv'\n-    weekend_spend[['day_type', 'amount']].to_csv(weekend_spend_path, index=False)\n-\n-    # 18. Cash flow analysis (if income/expense distinction exists)\n-    income_expense_col = detect_income_expense_column(df)\n-    if income_expense_col:\n-        cash_flow = df.groupby(['year_month', income_expense_col])['amount'].sum().unstack(fill_value=0)\n-        cash_flow['net'] = cash_flow.sum(axis=1)\n-        cash_flow_path = output_dir / 'cash_flow_analysis.csv'\n-        cash_flow.to_csv(cash_flow_path)\n-    else:\n-        cash_flow_path = None\n-\n-    # Print report summary\n-    logging.info(\"Generated reports:\")\n-    for f in [\n-        pivot_path,\n-        ytd_path,\n-        cum_path,\n-        rolling_path,\n-        top_path,\n-        monthly_total_path,\n-        cat_pct_change_path,\n-        largest_tx_path,\n-        merchant_spend_path,\n-        payment_spend_path,\n-        weekday_spend_path,\n-        no_spend_days_path,\n-        recurring_path,\n-        budget_compare_path,\n-        hist_path,\n-        stats_path,\n-        overall_stats_path,\n-        weekend_spend_path,\n-        cash_flow_path\n-    ]:\n-        if f:\n-            logging.info(f\"- {f}\")\n-\n     # Optional: display plot for monthly spending\n     if not args.no_plot:\n-        pivot.plot(title='Monthly Spending by Category')\n+        df.groupby(['year_month', 'category'])['amount'].sum().reset_index().pivot(index='year_month', columns='category', values='amount').fillna(0).plot(title='Monthly Spending by Category')\n         plt.xticks(rotation=45)\n         plt.tight_layout()\n         plt.show()\n \n"
                }
            ],
            "date": 1749262356183,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\"\"\"\nAnalyze a transaction CSV and generate spending reports.\n\nFeatures:\n- Detects date, amount, and category columns automatically.\n- Outputs:\n    - Monthly spending by category\n    - Year-to-date (last 12 months) spending by category\n    - Cumulative spending\n    - 3-month rolling average by category\n    - Top 10 spending descriptions\n    - Monthly total spending trend\n    - Category growth/decline (month-over-month % change)\n    - Largest single transactions\n    - Spending by merchant/vendor (if column exists)\n    - Spending by payment method (if column exists)\n    - Spending heatmap by day of week\n    - Days with no spending\n    - Recurring payments detection (simple heuristic)\n    - Budget comparison (if budget.csv exists)\n    - Spending distribution (histogram)\n    - Median and average transaction size (overall and by category)\n    - Spending by weekday/weekend\n    - Cash flow analysis (if income/expense distinction exists)\n- Optionally displays a plot of monthly spending by category.\n\"\"\"\n\nimport argparse\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport logging\nfrom pathlib import Path\nimport sys\nimport numpy as np\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Analyze a transaction CSV and generate spending reports.\")\n    parser.add_argument(\n        \"--input_csv\",\n        default=\"docs/AccountHistory.csv\",\n        help=\"Path to transactions CSV (default: docs/AccountHistory.csv)\"\n    )\n    parser.add_argument(\n        \"--output_dir\",\n        default=\".\",\n        help=\"Directory to save output CSVs (default: current directory)\"\n    )\n    parser.add_argument(\n        \"--no-plot\",\n        action=\"store_true\",\n        help=\"Do not display the monthly spending plot\"\n    )\n    parser.add_argument(\n        \"--budget_csv\",\n        default=None,\n        help=\"Optional: Path to budget CSV (columns: category, budget)\"\n    )\n    return parser.parse_args()\n\ndef setup_logging():\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(levelname)s: %(message)s\"\n    )\n\ndef detect_date_column(df):\n    for col in df.columns:\n        try:\n            parsed = pd.to_datetime(df[col], errors='coerce')\n            if parsed.notna().sum() > len(df) * 0.5:\n                logging.info(f\"Detected date column: '{col}'\")\n                return parsed\n        except Exception:\n            continue\n    raise ValueError(\"No suitable date column found. Please ensure your CSV has a date column.\")\n\ndef detect_amount_column(df):\n    num_cols = df.select_dtypes(include=['number']).columns\n    if not num_cols.empty:\n        logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n        return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n    for col in df.columns:\n        if 'amount' in col.lower():\n            logging.info(f\"Detected amount column by name: '{col}'\")\n            return pd.to_numeric(df[col], errors='coerce').fillna(0)\n    raise ValueError(\"No numeric column found for amounts.\")\n\ndef detect_category_column(df):\n    if 'category' in df.columns:\n        logging.info(\"Detected category column: 'category'\")\n        return df['category']\n    for col in df.columns:\n        if 'cat' in col.lower():\n            logging.info(f\"Detected category column: '{col}'\")\n            return df[col]\n    logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n    return 'Uncategorized'\n\ndef detect_description_column(df):\n    if 'description' in df.columns:\n        return 'description'\n    for col in df.columns:\n        if 'desc' in col.lower() or 'memo' in col.lower() or 'name' in col.lower():\n            return col\n    return df.columns[1] if len(df.columns) > 1 else df.columns[0]\n\ndef detect_merchant_column(df):\n    for col in df.columns:\n        if 'merchant' in col.lower() or 'vendor' in col.lower() or 'payee' in col.lower():\n            return col\n    return None\n\ndef detect_payment_method_column(df):\n    for col in df.columns:\n        if 'method' in col.lower() or 'payment' in col.lower():\n            return col\n    return None\n\ndef detect_income_expense_column(df):\n    for col in df.columns:\n        if 'type' in col.lower() or 'income' in col.lower() or 'expense' in col.lower():\n            return col\n    return None\n\ndef main():\n    setup_logging()\n    args = parse_args()\n    output_dir = Path(args.output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    try:\n        df = pd.read_csv(args.input_csv)\n    except Exception as e:\n        logging.error(f\"Failed to read input CSV: {e}\")\n        sys.exit(1)\n\n    try:\n        df['date'] = detect_date_column(df)\n        df['amount'] = detect_amount_column(df)\n        df['category'] = detect_category_column(df)\n    except Exception as e:\n        logging.error(e)\n        sys.exit(1)\n\n    df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n\n    # 1. Monthly spending by category\n    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n    pivot_path = output_dir / 'monthly_spending_by_category.csv'\n    pivot.to_csv(pivot_path)\n\n    # 2. Year-to-date (last 12 months) summary\n    latest = df['date'].max()\n    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n    ytd_path = output_dir / 'year_to_date_spending_by_category.csv'\n    ytd_summary.to_csv(ytd_path, index=False)\n\n    # 3. Cumulative spend\n    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n    cum_path = output_dir / 'cumulative_spending.csv'\n    cum.to_csv(cum_path, index=False)\n\n    # 4. 3-month rolling average\n    rolling = pivot.rolling(window=3).mean().dropna()\n    rolling_path = output_dir / '3mo_rolling_avg_by_category.csv'\n    rolling.to_csv(rolling_path)\n\n    # 5. Top 10 spending descriptions\n    desc_col = detect_description_column(df)\n    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n    top.columns = ['description', 'amount']\n    top_path = output_dir / 'top_10_spenders.csv'\n    top.to_csv(top_path, index=False)\n\n    # 6. Monthly total spending trend\n    monthly_total = df.groupby('year_month')['amount'].sum().reset_index()\n    monthly_total_path = output_dir / 'monthly_total_spending.csv'\n    monthly_total.to_csv(monthly_total_path, index=False)\n\n    # 7. Category growth/decline (month-over-month % change)\n    cat_pct_change = pivot.pct_change().replace([np.inf, -np.inf], np.nan) * 100\n    cat_pct_change_path = output_dir / 'category_monthly_pct_change.csv'\n    cat_pct_change.to_csv(cat_pct_change_path)\n\n    # 8. Largest single transactions\n    largest_tx = df.sort_values('amount', ascending=False).head(10)\n    largest_tx_path = output_dir / 'largest_single_transactions.csv'\n    largest_tx.to_csv(largest_tx_path, index=False)\n\n    # 9. Spending by merchant/vendor\n    merchant_col = detect_merchant_column(df)\n    if merchant_col:\n        merchant_spend = df.groupby(merchant_col)['amount'].sum().sort_values(ascending=False).reset_index()\n        merchant_spend_path = output_dir / 'spending_by_merchant.csv'\n        merchant_spend.to_csv(merchant_spend_path, index=False)\n    else:\n        merchant_spend_path = None\n\n    # 10. Spending by payment method\n    payment_col = detect_payment_method_column(df)\n    if payment_col:\n        payment_spend = df.groupby(payment_col)['amount'].sum().sort_values(ascending=False).reset_index()\n        payment_spend_path = output_dir / 'spending_by_payment_method.csv'\n        payment_spend.to_csv(payment_spend_path, index=False)\n    else:\n        payment_spend_path = None\n\n    # 11. Spending heatmap by day of week\n    df['weekday'] = df['date'].dt.day_name()\n    weekday_spend = df.groupby('weekday')['amount'].sum().reindex(\n        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    ).reset_index()\n    weekday_spend_path = output_dir / 'spending_by_weekday.csv'\n    weekday_spend.to_csv(weekday_spend_path, index=False)\n\n    # 12. Days with no spending\n    all_days = pd.date_range(df['date'].min(), df['date'].max(), freq='D')\n    spent_days = pd.to_datetime(df['date'].unique())\n    no_spend_days = pd.Series(all_days.difference(spent_days))\n    no_spend_days_path = output_dir / 'days_with_no_spending.csv'\n    no_spend_days.to_frame('date').to_csv(no_spend_days_path, index=False)\n\n    # 13. Recurring payments detection (simple: same amount, same description, monthly)\n    recurring = df.groupby([desc_col, 'amount']).size().reset_index(name='count')\n    recurring = recurring[recurring['count'] >= 3]  # at least 3 occurrences\n    recurring_path = output_dir / 'recurring_payments.csv'\n    recurring.to_csv(recurring_path, index=False)\n\n    # 14. Budget comparison (if budget CSV provided)\n    if args.budget_csv and Path(args.budget_csv).exists():\n        budget = pd.read_csv(args.budget_csv)\n        budget_compare = ytd_summary.merge(budget, on='category', how='left')\n        budget_compare['over_under'] = budget_compare['amount'] - budget_compare['budget']\n        budget_compare_path = output_dir / 'budget_comparison.csv'\n        budget_compare.to_csv(budget_compare_path, index=False)\n    else:\n        budget_compare_path = None\n\n    # 15. Spending distribution (histogram)\n    plt.figure()\n    df['amount'].plot.hist(bins=50, title='Spending Distribution (Histogram)')\n    plt.xlabel('Transaction Amount')\n    plt.tight_layout()\n    hist_path = output_dir / 'spending_distribution_histogram.png'\n    plt.savefig(hist_path)\n    plt.close()\n\n    # 16. Median and average transaction size (overall and by category)\n    stats = df.groupby('category')['amount'].agg(['mean', 'median', 'count']).reset_index()\n    stats_path = output_dir / 'transaction_stats_by_category.csv'\n    stats.to_csv(stats_path, index=False)\n    overall_stats = df['amount'].agg(['mean', 'median', 'count'])\n    overall_stats_path = output_dir / 'transaction_stats_overall.csv'\n    overall_stats.to_frame().T.to_csv(overall_stats_path, index=False)\n\n    # 17. Spending by weekday/weekend\n    df['is_weekend'] = df['date'].dt.weekday >= 5\n    weekend_spend = df.groupby('is_weekend')['amount'].sum().reset_index()\n    weekend_spend['day_type'] = weekend_spend['is_weekend'].map({True: 'Weekend', False: 'Weekday'})\n    weekend_spend_path = output_dir / 'spending_by_weekday_weekend.csv'\n    weekend_spend[['day_type', 'amount']].to_csv(weekend_spend_path, index=False)\n\n    # 18. Cash flow analysis (if income/expense distinction exists)\n    income_expense_col = detect_income_expense_column(df)\n    if income_expense_col:\n        cash_flow = df.groupby(['year_month', income_expense_col])['amount'].sum().unstack(fill_value=0)\n        cash_flow['net'] = cash_flow.sum(axis=1)\n        cash_flow_path = output_dir / 'cash_flow_analysis.csv'\n        cash_flow.to_csv(cash_flow_path)\n    else:\n        cash_flow_path = None\n\n    # Print report summary\n    logging.info(\"Generated reports:\")\n    for f in [\n        pivot_path,\n        ytd_path,\n        cum_path,\n        rolling_path,\n        top_path,\n        monthly_total_path,\n        cat_pct_change_path,\n        largest_tx_path,\n        merchant_spend_path,\n        payment_spend_path,\n        weekday_spend_path,\n        no_spend_days_path,\n        recurring_path,\n        budget_compare_path,\n        hist_path,\n        stats_path,\n        overall_stats_path,\n        weekend_spend_path,\n        cash_flow_path\n    ]:\n        if f:\n            logging.info(f\"- {f}\")\n\n    # Optional: display plot for monthly spending\n    if not args.no_plot:\n        pivot.plot(title='Monthly Spending by Category')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.show()\n\nif __name__ == '__main__':\n    main()"
        }
    ]
}