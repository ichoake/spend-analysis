{
    "sourceFile": "analyze_history.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749262158334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749262621482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n         format=\"%(levelname)s: %(message)s\"\n     )\n \n def detect_date_column(df):\n+    \"\"\"Detect the date column in the DataFrame.\"\"\"\n     for col in df.columns:\n         try:\n             parsed = pd.to_datetime(df[col], errors='coerce')\n             if parsed.notna().sum() > len(df) * 0.5:\n@@ -25,15 +26,17 @@\n             continue\n     raise ValueError(\"No suitable date column found.\")\n \n def detect_amount_column(df):\n+    \"\"\"Detect the first numeric column as the amount column.\"\"\"\n     num_cols = df.select_dtypes(include=['number']).columns\n     if not num_cols.empty:\n         logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n         return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n     raise ValueError(\"No numeric column found for amounts.\")\n \n def detect_category_column(df):\n+    \"\"\"Ensure a category column exists.\"\"\"\n     if 'category' in df.columns:\n         logging.info(\"Detected category column: 'category'\")\n         return df['category']\n     for col in df.columns:\n"
                }
            ],
            "date": 1749262158334,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport logging\nfrom pathlib import Path\nimport sys\n\nINPUT_CSV = \"docs/AccountHistory.csv\"\nOUTPUT_DIR = \".\"\n\ndef setup_logging():\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(levelname)s: %(message)s\"\n    )\n\ndef detect_date_column(df):\n    for col in df.columns:\n        try:\n            parsed = pd.to_datetime(df[col], errors='coerce')\n            if parsed.notna().sum() > len(df) * 0.5:\n                logging.info(f\"Detected date column: '{col}'\")\n                return parsed\n        except Exception:\n            continue\n    raise ValueError(\"No suitable date column found.\")\n\ndef detect_amount_column(df):\n    num_cols = df.select_dtypes(include=['number']).columns\n    if not num_cols.empty:\n        logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n        return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n    raise ValueError(\"No numeric column found for amounts.\")\n\ndef detect_category_column(df):\n    if 'category' in df.columns:\n        logging.info(\"Detected category column: 'category'\")\n        return df['category']\n    for col in df.columns:\n        if 'cat' in col.lower():\n            logging.info(f\"Detected category column: '{col}'\")\n            return df[col]\n    logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n    return 'Uncategorized'\n\ndef main():\n    setup_logging()\n    output_dir = Path(OUTPUT_DIR)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    try:\n        df = pd.read_csv(INPUT_CSV)\n    except Exception as e:\n        logging.error(f\"Failed to read input CSV: {e}\")\n        sys.exit(1)\n\n    df['date'] = detect_date_column(df)\n    df['amount'] = detect_amount_column(df)\n    df['category'] = detect_category_column(df)\n    df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n\n    # 1. Monthly spending by category\n    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n    pivot.to_csv(output_dir / 'monthly_spending_by_category.csv')\n\n    # 2. Year-to-date (last 12 months) summary\n    latest = df['date'].max()\n    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n    ytd_summary.to_csv(output_dir / 'year_to_date_spending_by_category.csv', index=False)\n\n    # 3. Cumulative spend\n    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n    cum.to_csv(output_dir / 'cumulative_spending.csv', index=False)\n\n    # 4. 3-month rolling average\n    rolling = pivot.rolling(window=3).mean().dropna()\n    rolling.to_csv(output_dir / '3mo_rolling_avg_by_category.csv')\n\n    # 5. Top 10 spending descriptions\n    desc_col = 'description' if 'description' in df.columns else df.columns[1]\n    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n    top.columns = ['description', 'amount']\n    top.to_csv(output_dir / 'top_10_spenders.csv', index=False)\n\n    # Print report summary\n    logging.info(\"Generated reports:\")\n    for f in [\n        'monthly_spending_by_category.csv',\n        'year_to_date_spending_by_category.csv',\n        'cumulative_spending.csv',\n        '3mo_rolling_avg_by_category.csv',\n        'top_10_spenders.csv'\n    ]:\n        logging.info(f\"- {f}\")\n\n    # Display plot for monthly spending\n    pivot.plot(title='Monthly Spending by Category')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n\nif __name__ == '__main__':\n    main()"
        }
    ]
}