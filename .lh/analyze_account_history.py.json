{
    "sourceFile": "analyze_account_history.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749262219247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749262592853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \"\"\"\n Analyze a transaction CSV and generate spending reports.\n \n Features:\n-- Detects date, amount, and category columns automatically.\n+- Automatically detects date, amount, and category columns.\n - Outputs:\n     - Monthly spending by category\n     - Year-to-date (last 12 months) spending by category\n     - Cumulative spending\n"
                },
                {
                    "date": 1749262598666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,8 @@\n     num_cols = df.select_dtypes(include=['number']).columns\n     if not num_cols.empty:\n         logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n         return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n-    # Try to find a column with 'amount' in its name\n     for col in df.columns:\n         if 'amount' in col.lower():\n             logging.info(f\"Detected amount column by name: '{col}'\")\n             return pd.to_numeric(df[col], errors='coerce').fillna(0)\n@@ -74,9 +73,8 @@\n     \"\"\"Ensure a category column exists.\"\"\"\n     if 'category' in df.columns:\n         logging.info(\"Detected category column: 'category'\")\n         return df['category']\n-    # Try to find a likely category column\n     for col in df.columns:\n         if 'cat' in col.lower():\n             logging.info(f\"Detected category column: '{col}'\")\n             return df[col]\n@@ -86,13 +84,11 @@\n def detect_description_column(df):\n     \"\"\"Detect a description column for top spenders.\"\"\"\n     if 'description' in df.columns:\n         return 'description'\n-    # Try to find a likely description column\n     for col in df.columns:\n         if 'desc' in col.lower() or 'memo' in col.lower() or 'name' in col.lower():\n             return col\n-    # Fallback: use the second column (after date)\n     return df.columns[1] if len(df.columns) > 1 else df.columns[0]\n \n def main():\n     setup_logging()\n@@ -115,8 +111,17 @@\n         sys.exit(1)\n \n     df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n \n+    # Generate reports\n+    generate_reports(df, output_dir)\n+\n+    # Optional: display plot for monthly spending\n+    if not args.no_plot:\n+        display_monthly_spending_plot(df)\n+\n+def generate_reports(df, output_dir):\n+    \"\"\"Generate various spending reports.\"\"\"\n     # 1. Monthly spending by category\n     monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n     pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n     pivot_path = output_dir / 'monthly_spending_by_category.csv'\n@@ -147,22 +152,17 @@\n     top.to_csv(top_path, index=False)\n \n     # Print report summary\n     logging.info(\"Generated reports:\")\n-    for f in [\n-        pivot_path,\n-        ytd_path,\n-        cum_path,\n-        rolling_path,\n-        top_path\n-    ]:\n+    for f in [pivot_path, ytd_path, cum_path, rolling_path, top_path]:\n         logging.info(f\"- {f}\")\n \n-    # Optional: display plot for monthly spending\n-    if not args.no_plot:\n-        pivot.plot(title='Monthly Spending by Category')\n-        plt.xticks(rotation=45)\n-        plt.tight_layout()\n-        plt.show()\n+def display_monthly_spending_plot(df):\n+    \"\"\"Display a plot for monthly spending by category.\"\"\"\n+    pivot = df.pivot(index='year_month', columns='category', values='amount').fillna(0)\n+    pivot.plot(title='Monthly Spending by Category')\n+    plt.xticks(rotation=45)\n+    plt.tight_layout()\n+    plt.show()\n \n if __name__ == '__main__':\n     main()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749262219247,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\"\"\"\nAnalyze a transaction CSV and generate spending reports.\n\nFeatures:\n- Detects date, amount, and category columns automatically.\n- Outputs:\n    - Monthly spending by category\n    - Year-to-date (last 12 months) spending by category\n    - Cumulative spending\n    - 3-month rolling average by category\n    - Top 10 spending descriptions\n- Optionally displays a plot of monthly spending by category.\n\"\"\"\n\nimport argparse\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport logging\nfrom pathlib import Path\nimport sys\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Analyze a transaction CSV and generate spending reports.\")\n    parser.add_argument(\n        \"--input_csv\",\n        default=\"docs/AccountHistory.csv\",\n        help=\"Path to transactions CSV (default: docs/AccountHistory.csv)\"\n    )\n    parser.add_argument(\n        \"--output_dir\",\n        default=\".\",\n        help=\"Directory to save output CSVs (default: current directory)\"\n    )\n    parser.add_argument(\n        \"--no-plot\",\n        action=\"store_true\",\n        help=\"Do not display the monthly spending plot\"\n    )\n    return parser.parse_args()\n\ndef setup_logging():\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(levelname)s: %(message)s\"\n    )\n\ndef detect_date_column(df):\n    \"\"\"Detect the date column in the DataFrame.\"\"\"\n    for col in df.columns:\n        try:\n            parsed = pd.to_datetime(df[col], errors='coerce')\n            if parsed.notna().sum() > len(df) * 0.5:\n                logging.info(f\"Detected date column: '{col}'\")\n                return parsed\n        except Exception:\n            continue\n    raise ValueError(\"No suitable date column found. Please ensure your CSV has a date column.\")\n\ndef detect_amount_column(df):\n    \"\"\"Detect the first numeric column as the amount column.\"\"\"\n    num_cols = df.select_dtypes(include=['number']).columns\n    if not num_cols.empty:\n        logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n        return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n    # Try to find a column with 'amount' in its name\n    for col in df.columns:\n        if 'amount' in col.lower():\n            logging.info(f\"Detected amount column by name: '{col}'\")\n            return pd.to_numeric(df[col], errors='coerce').fillna(0)\n    raise ValueError(\"No numeric column found for amounts.\")\n\ndef detect_category_column(df):\n    \"\"\"Ensure a category column exists.\"\"\"\n    if 'category' in df.columns:\n        logging.info(\"Detected category column: 'category'\")\n        return df['category']\n    # Try to find a likely category column\n    for col in df.columns:\n        if 'cat' in col.lower():\n            logging.info(f\"Detected category column: '{col}'\")\n            return df[col]\n    logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n    return 'Uncategorized'\n\ndef detect_description_column(df):\n    \"\"\"Detect a description column for top spenders.\"\"\"\n    if 'description' in df.columns:\n        return 'description'\n    # Try to find a likely description column\n    for col in df.columns:\n        if 'desc' in col.lower() or 'memo' in col.lower() or 'name' in col.lower():\n            return col\n    # Fallback: use the second column (after date)\n    return df.columns[1] if len(df.columns) > 1 else df.columns[0]\n\ndef main():\n    setup_logging()\n    args = parse_args()\n    output_dir = Path(args.output_dir)\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    try:\n        df = pd.read_csv(args.input_csv)\n    except Exception as e:\n        logging.error(f\"Failed to read input CSV: {e}\")\n        sys.exit(1)\n\n    try:\n        df['date'] = detect_date_column(df)\n        df['amount'] = detect_amount_column(df)\n        df['category'] = detect_category_column(df)\n    except Exception as e:\n        logging.error(e)\n        sys.exit(1)\n\n    df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n\n    # 1. Monthly spending by category\n    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n    pivot_path = output_dir / 'monthly_spending_by_category.csv'\n    pivot.to_csv(pivot_path)\n\n    # 2. Year-to-date (last 12 months) summary\n    latest = df['date'].max()\n    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n    ytd_path = output_dir / 'year_to_date_spending_by_category.csv'\n    ytd_summary.to_csv(ytd_path, index=False)\n\n    # 3. Cumulative spend\n    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n    cum_path = output_dir / 'cumulative_spending.csv'\n    cum.to_csv(cum_path, index=False)\n\n    # 4. 3-month rolling average\n    rolling = pivot.rolling(window=3).mean().dropna()\n    rolling_path = output_dir / '3mo_rolling_avg_by_category.csv'\n    rolling.to_csv(rolling_path)\n\n    # 5. Top 10 spending descriptions\n    desc_col = detect_description_column(df)\n    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n    top.columns = ['description', 'amount']\n    top_path = output_dir / 'top_10_spenders.csv'\n    top.to_csv(top_path, index=False)\n\n    # Print report summary\n    logging.info(\"Generated reports:\")\n    for f in [\n        pivot_path,\n        ytd_path,\n        cum_path,\n        rolling_path,\n        top_path\n    ]:\n        logging.info(f\"- {f}\")\n\n    # Optional: display plot for monthly spending\n    if not args.no_plot:\n        pivot.plot(title='Monthly Spending by Category')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.show()\n\nif __name__ == '__main__':\n    main()"
        }
    ]
}