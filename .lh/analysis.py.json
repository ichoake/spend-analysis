{
    "sourceFile": "analysis.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1749262639923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749270078654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,171 @@\n #!/usr/bin/env python3\n+\n import argparse\n-import pandas as pd\n-import matplotlib.pyplot as plt\n import logging\n+from pathlib import Path\n \n+import matplotlib.pyplot as plt\n+import pandas as pd\n+\n+\n def parse_args():\n-    parser = argparse.ArgumentParser(description=\"12-month spending analysis\")\n-    parser.add_argument(\"input_csv\", help=\"Path to transactions CSV (must have date, amount, category)\")\n+    parser = argparse.ArgumentParser(\n+        description=\"Analyze 12 months of spending from a transactions CSV.\"\n+    )\n+    parser.add_argument(\n+        \"input_csv\",\n+        help=\"Path to transactions CSV (must have date, amount, category columns)\",\n+    )\n+    parser.add_argument(\n+        \"--output_dir\",\n+        default=\".\",\n+        help=\"Directory to save output CSVs (default: current directory)\",\n+    )\n+    parser.add_argument(\n+        \"--no-plot\",\n+        action=\"store_true\",\n+        help=\"Do not display the monthly spending plot\",\n+    )\n     return parser.parse_args()\n \n+\n def setup_logging():\n-    logging.basicConfig(level=logging.INFO, format=\"%(levelname)s: %(message)s\")\n+    logging.basicConfig(\n+        level=logging.INFO,\n+        format=\"%(levelname)s: %(message)s\"\n+    )\n \n+\n def detect_date_column(df):\n     \"\"\"Detect the date column in the DataFrame.\"\"\"\n     for col in df.columns:\n         try:\n-            parsed = pd.to_datetime(df[col], errors='coerce')\n+            parsed = pd.to_datetime(df[col], errors=\"coerce\")\n             if parsed.notna().sum() > len(df) * 0.5:\n                 logging.info(f\"Detected date column: '{col}'\")\n                 return parsed\n         except Exception:\n             continue\n     raise ValueError(\"No suitable date column found.\")\n \n+\n def detect_amount_column(df):\n     \"\"\"Detect the first numeric column as the amount column.\"\"\"\n-    num_cols = df.select_dtypes(include=['number']).columns\n+    num_cols = df.select_dtypes(include=[\"number\"]).columns\n     if not num_cols.empty:\n         logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n-        return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n+        return pd.to_numeric(df[num_cols[0]], errors=\"coerce\").fillna(0)\n     raise ValueError(\"No numeric column found for amounts.\")\n \n+\n def ensure_category_column(df):\n     \"\"\"Ensure a category column exists.\"\"\"\n-    if 'category' not in df.columns:\n-        logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n-        df['category'] = 'Uncategorized'\n-    return df['category']\n+    if \"category\" not in df.columns:\n+        logging.warning(\n+            \"No category column found. Assigning all as 'Uncategorized'.\"\n+        )\n+        df[\"category\"] = \"Uncategorized\"\n+    return df[\"category\"]\n \n-def generate_reports(df):\n-    \"\"\"Generate various spending reports.\"\"\"\n+\n+def generate_reports(df, output_dir=\".\"):\n+    \"\"\"Generate various spending reports and save them to output_dir.\"\"\"\n+    output_dir = Path(output_dir)\n+    output_dir.mkdir(parents=True, exist_ok=True)\n+\n     # Prepare grouping columns\n-    df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n+    df[\"year_month\"] = df[\"date\"].dt.to_period(\"M\").dt.to_timestamp()\n \n     # 1. Monthly spending by category\n-    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n-    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n-    pivot.to_csv('monthly_spending_by_category.csv')\n+    monthly = (\n+        df.groupby([\"year_month\", \"category\"])[\"amount\"]\n+        .sum()\n+        .reset_index()\n+    )\n+    pivot = (\n+        monthly.pivot(index=\"year_month\", columns=\"category\", values=\"amount\")\n+        .fillna(0)\n+    )\n+    monthly_csv = output_dir / \"monthly_spending_by_category.csv\"\n+    pivot.to_csv(monthly_csv)\n \n     # 2. Year-to-date (last 12 months) summary\n-    latest = df['date'].max()\n-    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n-    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n-    ytd_summary.to_csv('year_to_date_spending_by_category.csv', index=False)\n+    latest = df[\"date\"].max()\n+    ytd = df[df[\"date\"] >= (latest - pd.DateOffset(months=12))]\n+    ytd_summary = ytd.groupby(\"category\")[\"amount\"].sum().reset_index()\n+    ytd_csv = output_dir / \"year_to_date_spending_by_category.csv\"\n+    ytd_summary.to_csv(ytd_csv, index=False)\n \n     # 3. Cumulative spend\n-    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n-    cum.to_csv('cumulative_spending.csv', index=False)\n+    cum = (\n+        df.sort_values(\"date\")\n+        .groupby(\"date\")[\"amount\"]\n+        .sum()\n+        .cumsum()\n+        .reset_index()\n+    )\n+    cum_csv = output_dir / \"cumulative_spending.csv\"\n+    cum.to_csv(cum_csv, index=False)\n \n     # 4. 3-month rolling average\n     rolling = pivot.rolling(window=3).mean().dropna()\n-    rolling.to_csv('3mo_rolling_avg_by_category.csv')\n+    rolling_csv = output_dir / \"3mo_rolling_avg_by_category.csv\"\n+    rolling.to_csv(rolling_csv)\n \n     # 5. Top 10 spending descriptions\n-    desc_col = 'description' if 'description' in df.columns else df.columns[1]\n-    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n-    top.columns = ['description', 'amount']\n-    top.to_csv('top_10_spenders.csv', index=False)\n+    desc_col = (\n+        \"description\"\n+        if \"description\" in df.columns\n+        else df.columns[1]\n+    )\n+    top = (\n+        df.groupby(desc_col)[\"amount\"]\n+        .sum()\n+        .nlargest(10)\n+        .reset_index()\n+    )\n+    top.columns = [\"description\", \"amount\"]\n+    top_csv = output_dir / \"top_10_spenders.csv\"\n+    top.to_csv(top_csv, index=False)\n \n     # Print report summary\n-    print(\"Generated reports:\")\n+    logging.info(\"Generated reports:\")\n     for f in [\n-        'monthly_spending_by_category.csv',\n-        'year_to_date_spending_by_category.csv',\n-        'cumulative_spending.csv',\n-        '3mo_rolling_avg_by_category.csv',\n-        'top_10_spenders.csv'\n+        monthly_csv,\n+        ytd_csv,\n+        cum_csv,\n+        rolling_csv,\n+        top_csv,\n     ]:\n-        print('-', f)\n+        logging.info(f\"- {f}\")\n \n     # Optional: display plot for monthly spending\n-    pivot.plot(title='Monthly Spending by Category')\n-    plt.xticks(rotation=45)\n-    plt.tight_layout()\n-    plt.show()\n+    return pivot\n+\n+\n+def main():\n+    setup_logging()\n+    args = parse_args()\n+\n+    # Load data\n+    df = pd.read_csv(args.input_csv)\n+\n+    # Detect and assign columns\n+    df[\"date\"] = detect_date_column(df)\n+    df[\"amount\"] = detect_amount_column(df)\n+    df[\"category\"] = ensure_category_column(df)\n+\n+    # Generate reports\n+    pivot = generate_reports(df, output_dir=args.output_dir)\n+\n+    # Show plot unless suppressed\n+    if not args.no_plot:\n+        ax = pivot.plot(title=\"Monthly Spending by Category\", figsize=(10, 6))\n+        ax.set_ylabel(\"Amount\")\n+        plt.xticks(rotation=45)\n+        plt.tight_layout()\n+        plt.show()\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1749270116344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,11 @@\n         description=\"Analyze 12 months of spending from a transactions CSV.\"\n     )\n     parser.add_argument(\n         \"input_csv\",\n-        help=\"Path to transactions CSV (must have date, amount, category columns)\",\n+        help=(\n+            \"Path to transactions CSV (must have date, amount, category columns)\"\n+        ),\n     )\n     parser.add_argument(\n         \"--output_dir\",\n         default=\".\",\n@@ -51,11 +53,21 @@\n \n def detect_amount_column(df):\n     \"\"\"Detect the first numeric column as the amount column.\"\"\"\n     num_cols = df.select_dtypes(include=[\"number\"]).columns\n-    if not num_cols.empty:\n+    if len(num_cols) > 0:\n         logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n         return pd.to_numeric(df[num_cols[0]], errors=\"coerce\").fillna(0)\n+    # Try to find a likely amount column by name if no numeric columns\n+    for col in df.columns:\n+        if \"amount\" in col.lower():\n+            try:\n+                vals = pd.to_numeric(df[col], errors=\"coerce\")\n+                if vals.notna().sum() > len(df) * 0.5:\n+                    logging.info(f\"Detected amount column by name: '{col}'\")\n+                    return vals.fillna(0)\n+            except Exception:\n+                continue\n     raise ValueError(\"No numeric column found for amounts.\")\n \n \n def ensure_category_column(df):\n@@ -73,15 +85,17 @@\n     output_dir = Path(output_dir)\n     output_dir.mkdir(parents=True, exist_ok=True)\n \n     # Prepare grouping columns\n+    if not pd.api.types.is_datetime64_any_dtype(df[\"date\"]):\n+        df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\n+    df = df.dropna(subset=[\"date\"])\n     df[\"year_month\"] = df[\"date\"].dt.to_period(\"M\").dt.to_timestamp()\n \n     # 1. Monthly spending by category\n     monthly = (\n-        df.groupby([\"year_month\", \"category\"])[\"amount\"]\n+        df.groupby([\"year_month\", \"category\"], as_index=False)[\"amount\"]\n         .sum()\n-        .reset_index()\n     )\n     pivot = (\n         monthly.pivot(index=\"year_month\", columns=\"category\", values=\"amount\")\n         .fillna(0)\n@@ -90,40 +104,49 @@\n     pivot.to_csv(monthly_csv)\n \n     # 2. Year-to-date (last 12 months) summary\n     latest = df[\"date\"].max()\n-    ytd = df[df[\"date\"] >= (latest - pd.DateOffset(months=12))]\n-    ytd_summary = ytd.groupby(\"category\")[\"amount\"].sum().reset_index()\n+    if pd.isnull(latest):\n+        raise ValueError(\"No valid dates found in the data.\")\n+    ytd_start = latest - pd.DateOffset(months=12)\n+    ytd = df[df[\"date\"] >= ytd_start]\n+    ytd_summary = ytd.groupby(\"category\", as_index=False)[\"amount\"].sum()\n     ytd_csv = output_dir / \"year_to_date_spending_by_category.csv\"\n     ytd_summary.to_csv(ytd_csv, index=False)\n \n     # 3. Cumulative spend\n     cum = (\n         df.sort_values(\"date\")\n-        .groupby(\"date\")[\"amount\"]\n+        .groupby(\"date\", as_index=False)[\"amount\"]\n         .sum()\n-        .cumsum()\n-        .reset_index()\n     )\n+    cum[\"cumulative_amount\"] = cum[\"amount\"].cumsum()\n     cum_csv = output_dir / \"cumulative_spending.csv\"\n-    cum.to_csv(cum_csv, index=False)\n+    cum[[\"date\", \"cumulative_amount\"]].to_csv(cum_csv, index=False)\n \n     # 4. 3-month rolling average\n-    rolling = pivot.rolling(window=3).mean().dropna()\n+    rolling = pivot.rolling(window=3, min_periods=1).mean()\n     rolling_csv = output_dir / \"3mo_rolling_avg_by_category.csv\"\n     rolling.to_csv(rolling_csv)\n \n     # 5. Top 10 spending descriptions\n-    desc_col = (\n-        \"description\"\n-        if \"description\" in df.columns\n-        else df.columns[1]\n-    )\n+    if \"description\" in df.columns:\n+        desc_col = \"description\"\n+    else:\n+        # Try to find a likely description column\n+        possible_desc = [col for col in df.columns if \"desc\" in col.lower()]\n+        if possible_desc:\n+            desc_col = possible_desc[0]\n+        else:\n+            # Fallback: use the first non-date, non-amount, non-category column\n+            exclude = {\"date\", \"amount\", \"category\", \"year_month\"}\n+            candidates = [col for col in df.columns if col not in exclude]\n+            desc_col = candidates[0] if candidates else df.columns[0]\n     top = (\n-        df.groupby(desc_col)[\"amount\"]\n+        df.groupby(desc_col, as_index=False)[\"amount\"]\n         .sum()\n-        .nlargest(10)\n-        .reset_index()\n+        .sort_values(\"amount\", ascending=False)\n+        .head(10)\n     )\n     top.columns = [\"description\", \"amount\"]\n     top_csv = output_dir / \"top_10_spenders.csv\"\n     top.to_csv(top_csv, index=False)\n@@ -147,25 +170,40 @@\n     setup_logging()\n     args = parse_args()\n \n     # Load data\n-    df = pd.read_csv(args.input_csv)\n+    try:\n+        df = pd.read_csv(args.input_csv)\n+    except Exception as e:\n+        logging.error(f\"Failed to read CSV: {e}\")\n+        return\n \n     # Detect and assign columns\n-    df[\"date\"] = detect_date_column(df)\n-    df[\"amount\"] = detect_amount_column(df)\n-    df[\"category\"] = ensure_category_column(df)\n+    try:\n+        df[\"date\"] = detect_date_column(df)\n+        df[\"amount\"] = detect_amount_column(df)\n+        df[\"category\"] = ensure_category_column(df)\n+    except Exception as e:\n+        logging.error(f\"Error detecting columns: {e}\")\n+        return\n \n     # Generate reports\n-    pivot = generate_reports(df, output_dir=args.output_dir)\n+    try:\n+        pivot = generate_reports(df, output_dir=args.output_dir)\n+    except Exception as e:\n+        logging.error(f\"Error generating reports: {e}\")\n+        return\n \n     # Show plot unless suppressed\n     if not args.no_plot:\n-        ax = pivot.plot(title=\"Monthly Spending by Category\", figsize=(10, 6))\n-        ax.set_ylabel(\"Amount\")\n-        plt.xticks(rotation=45)\n-        plt.tight_layout()\n-        plt.show()\n+        try:\n+            ax = pivot.plot(title=\"Monthly Spending by Category\", figsize=(10, 6))\n+            ax.set_ylabel(\"Amount\")\n+            plt.xticks(rotation=45)\n+            plt.tight_layout()\n+            plt.show()\n+        except Exception as e:\n+            logging.error(f\"Error displaying plot: {e}\")\n \n \n if __name__ == \"__main__\":\n     main()\n"
                }
            ],
            "date": 1749262639923,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\nimport argparse\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport logging\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"12-month spending analysis\")\n    parser.add_argument(\"input_csv\", help=\"Path to transactions CSV (must have date, amount, category)\")\n    return parser.parse_args()\n\ndef setup_logging():\n    logging.basicConfig(level=logging.INFO, format=\"%(levelname)s: %(message)s\")\n\ndef detect_date_column(df):\n    \"\"\"Detect the date column in the DataFrame.\"\"\"\n    for col in df.columns:\n        try:\n            parsed = pd.to_datetime(df[col], errors='coerce')\n            if parsed.notna().sum() > len(df) * 0.5:\n                logging.info(f\"Detected date column: '{col}'\")\n                return parsed\n        except Exception:\n            continue\n    raise ValueError(\"No suitable date column found.\")\n\ndef detect_amount_column(df):\n    \"\"\"Detect the first numeric column as the amount column.\"\"\"\n    num_cols = df.select_dtypes(include=['number']).columns\n    if not num_cols.empty:\n        logging.info(f\"Detected amount column: '{num_cols[0]}'\")\n        return pd.to_numeric(df[num_cols[0]], errors='coerce').fillna(0)\n    raise ValueError(\"No numeric column found for amounts.\")\n\ndef ensure_category_column(df):\n    \"\"\"Ensure a category column exists.\"\"\"\n    if 'category' not in df.columns:\n        logging.warning(\"No category column found. Assigning all as 'Uncategorized'.\")\n        df['category'] = 'Uncategorized'\n    return df['category']\n\ndef generate_reports(df):\n    \"\"\"Generate various spending reports.\"\"\"\n    # Prepare grouping columns\n    df['year_month'] = df['date'].dt.to_period('M').dt.to_timestamp()\n\n    # 1. Monthly spending by category\n    monthly = df.groupby(['year_month', 'category'])['amount'].sum().reset_index()\n    pivot = monthly.pivot(index='year_month', columns='category', values='amount').fillna(0)\n    pivot.to_csv('monthly_spending_by_category.csv')\n\n    # 2. Year-to-date (last 12 months) summary\n    latest = df['date'].max()\n    ytd = df[df['date'] >= (latest - pd.DateOffset(months=12))]\n    ytd_summary = ytd.groupby('category')['amount'].sum().reset_index()\n    ytd_summary.to_csv('year_to_date_spending_by_category.csv', index=False)\n\n    # 3. Cumulative spend\n    cum = df.groupby('date')['amount'].sum().cumsum().reset_index()\n    cum.to_csv('cumulative_spending.csv', index=False)\n\n    # 4. 3-month rolling average\n    rolling = pivot.rolling(window=3).mean().dropna()\n    rolling.to_csv('3mo_rolling_avg_by_category.csv')\n\n    # 5. Top 10 spending descriptions\n    desc_col = 'description' if 'description' in df.columns else df.columns[1]\n    top = df.groupby(desc_col)['amount'].sum().nlargest(10).reset_index()\n    top.columns = ['description', 'amount']\n    top.to_csv('top_10_spenders.csv', index=False)\n\n    # Print report summary\n    print(\"Generated reports:\")\n    for f in [\n        'monthly_spending_by_category.csv',\n        'year_to_date_spending_by_category.csv',\n        'cumulative_spending.csv',\n        '3mo_rolling_avg_by_category.csv',\n        'top_10_spenders.csv'\n    ]:\n        print('-', f)\n\n    # Optional: display plot for monthly spending\n    pivot.plot(title='Monthly Spending by Category')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n"
        }
    ]
}