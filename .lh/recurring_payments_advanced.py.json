{
    "sourceFile": "recurring_payments_advanced.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749263649156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749263649156,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\n\"\"\"\nRecurring Payment Analyzer - TechnoMancer Edition (Prompt version)\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\n\n# If you want fuzzy grouping, uncomment the following and run `pip install rapidfuzz`\ntry:\n    from rapidfuzz import process, fuzz\n    FUZZY = True\nexcept ImportError:\n    print(\"RapidFuzz not installed; skipping fuzzy vendor grouping.\")\n    FUZZY = False\n\n# ---------- CONFIG ----------\nINPUT_CSV = input(\"Enter the full path to your transaction CSV file: \").strip()\nSUMMARY_CSV = \"recurring_payments_summary.csv\"\nTRANSACTIONS_CSV = \"transactions_with_groups.csv\"\nTOLERANCE = 1.0  # Dollar tolerance for amount grouping\nMIN_COUNT = 3    # Minimum times a payment must occur to be considered recurring\nFUZZY_THRESHOLD = 85  # For vendor grouping (if fuzzy enabled)\n\ndef load_data(filepath):\n    df = pd.read_csv(filepath)\n    df['date'] = pd.to_datetime(df['Post Date'], errors='coerce')\n    df['amount'] = pd.to_numeric(df['Debit'], errors='coerce')\n    df = df[df['amount'] > 0].dropna(subset=['date', 'Description', 'amount'])\n    return df\n\ndef fuzzy_group_vendors(df):\n    vendor_names = df['Description'].unique()\n    clusters = {}\n    for name in vendor_names:\n        if name in clusters:\n            continue\n        matches = process.extract(name, vendor_names, scorer=fuzz.token_sort_ratio, limit=20)\n        similar = [m[0] for m in matches if m[1] >= FUZZY_THRESHOLD]\n        for s in similar:\n            clusters[s] = name\n    df['vendor_group'] = df['Description'].map(clusters)\n    return df\n\ndef group_amounts_with_tolerance(df, tol=TOLERANCE):\n    def group(series):\n        base = []\n        for amt in sorted(series.unique()):\n            for group in base:\n                if abs(group[0] - amt) <= tol:\n                    group.append(amt)\n                    break\n            else:\n                base.append([amt])\n        mapping = {amt: np.mean(g) for g in base for amt in g}\n        return series.map(mapping)\n    df['amount_grouped'] = df.groupby('vendor_group')['amount'].transform(group)\n    return df\n\ndef detect_periodicity(dates):\n    gaps = pd.Series(sorted(dates)).diff().dt.days.dropna()\n    if len(gaps) == 0:\n        return None, None\n    freq = int(np.median(gaps))\n    if 27 <= freq <= 33:\n        pattern = 'Monthly'\n    elif 6 <= freq <= 8:\n        pattern = 'Weekly'\n    elif 13 <= freq <= 16:\n        pattern = 'Bi-Weekly'\n    elif 350 <= freq <= 380:\n        pattern = 'Yearly'\n    else:\n        pattern = 'Irregular'\n    return freq, pattern\n\ndef recurring_summary(df):\n    recurring = df.groupby(['vendor_group', 'amount_grouped']).agg(\n        count=('date', 'count'),\n        first_date=('date', 'min'),\n        last_date=('date', 'max'),\n        all_dates=('date', lambda x: sorted(x))\n    ).reset_index()\n    recurring = recurring[recurring['count'] >= MIN_COUNT].copy()\n    recurring[['median_freq_days', 'pattern']] = recurring['all_dates'].apply(\n        lambda dates: pd.Series(detect_periodicity(dates))\n    )\n    recurring.drop(columns=['all_dates'], inplace=True)\n    recurring = recurring.sort_values(['count', 'vendor_group', 'amount_grouped'], ascending=[False, True, True]).reset_index(drop=True)\n    return recurring\n\ndef main():\n    # Load data\n    df = load_data(INPUT_CSV)\n    # Fuzzy vendor grouping if possible, else just use Description\n    if FUZZY:\n        df = fuzzy_group_vendors(df)\n    else:\n        df['vendor_group'] = df['Description']\n    # Amount tolerance grouping\n    df = group_amounts_with_tolerance(df)\n    # Summarize recurring payments\n    recurring = recurring_summary(df)\n    # Save outputs\n    recurring.to_csv(SUMMARY_CSV, index=False)\n    df.to_csv(TRANSACTIONS_CSV, index=False)\n    print(f\"Recurring payment summary saved to {SUMMARY_CSV}\")\n    print(f\"All grouped transactions saved to {TRANSACTIONS_CSV}\")\n    print(\"\\nRecurring Payment Preview:\\n\", recurring.head(15).to_string())\n\nif __name__ == '__main__':\n    main()\n"
        }
    ]
}